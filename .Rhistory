group_by(Character) %>%
filter(year.exposure == max(year.exposure)) %>%
ungroup()
#if the year of death is same as last appearance then died on street
#we also count as died on street is year of death was only 1 higher than last appearance on street...
#,,,this is represents cases where actor left abruptly and was written out, but character still essentially living on Coronation St.
dead.on.street <- left_join(last.appearance, char.deaths.full) %>%
filter(year.death == year.exposure | year.death == year.exposure + 1) %>%
select(-year.death)
# create vector that tells if each row of appearances is present in dead.on.street vector
is.death <- apply(appearances %>% select(Character, year.exposure), 1, function(row) {
any(apply(dead.on.street, 1, function(row2) all(row == row2)))
})
# ----------- Combining data frames to get Exposure Table  ------------------------------
# add year of birth and get age for each exposure
exposure.table <- data.frame(appearances,is.death) %>%    #attached the is.death field to appearances table
inner_join(valid.births) %>%                            #inner join valid births. not interested in characters that can't age so using inner_join
mutate(age = year.exposure - year.of.birth)             #calculate age
exposure.table
exposure.table %>% View()
styler::style_file()
library(styler)
library(tidyverse)
library(ggpattern)
# base URL code for scraping character names
base.url.letters <- "https://coronationstreet.fandom.com/wiki/Category:List_of_main_character_appearances?from="
#populate all.char.names.list with all character names that have pages on fandom.wiki
#to do this, cycle through each letter of alphabet, scrape from the page that has corrie characters under that letter
all.char.names.list <- list()
for (lett in LETTERS) {
char.list <- str_c(base.url.letters, lett, sep = "")
character.names <- rvest::read_html(char.list) %>%
html_elements(".category-page__member-link") %>%
html_text() %>%
str_remove_all(" - List of appearances")
all.char.names.list[[lett]] <- character.names
}
# get vector of all unique character names
all.char.names <- all.char.names.list %>%
unlist() %>%                              # turn list into vector
as.character() %>%                        # convert data type to character
unique()                                  # remove duplicates
# base URL code for scraping character names
base.url.characters <- "https://coronationstreet.fandom.com/wiki/"
#function to scrape fandom wiki for a character
# function is calibrated for Coronation St. wiki, although might be more transferable to others
scrape.fandom.wiki <- function(character,
base.url) {
char.text <- character %>% str_replace_all(" ", "_")
char.bio <- str_c(base.url, char.text)
# pull the key stats for the character
char.stat <- rvest::read_html(char.bio) %>%
html_elements(".pi-secondary-font") %>%
html_text() %>%
.[-1]
char.value <- rvest::read_html(char.bio) %>%
html_elements(".pi-font") %>%
html_text()
char.data <- data.frame(Field = char.stat, Value = char.value)
return(char.data)
}
#populate all.char.data by mapping scrape.fandom.wiki across character vector... can take a while (10 mins)
char.data.list <- map(.x=all.char.names,
.f=scrape.fandom.wiki,
base.url=base.url.characters)
# tidy the list up into data.frame
names(char.data.list) <- all.char.names
character.data <- char.data.list %>% bind_rows(.id = "Character")
appearances %>% select(Character, year.exposure)
appearances
# reformat into data.frame of exposure
appearances <- enframe(years.exposure.list) %>% unnest(value)
source("~/R/Paul Projects/Corrie/coronationstreet/R/Processing for Experience Tables.R", echo=TRUE)
all.char.names <- character.data$Character %>% unique()
#------------------- Exposure Years ----------------------
char.durations <- character.data %>% filter(Field == "Duration")
# function to produce a vector from the string formats used within "Duration" entries
curr.year <- 2023
# function that turns a string (as per Duration entry of fandom.wiki) into a vector of years of appearance
transcribe.duration <- function(x) {
#apply cleaning to x to get y
y <- str_replace_all(x, " to present", str_c(":",curr.year,sep="")) #some entries say "to present" so convert to what that means in term of appearance years
y <- str_replace_all(y, "-", ":")                                   #change to ":" so can evaluate the code to create vector
#some entries have extra text to distinguish Coronation Street from other shows (i.e. After Hours)
#this bit of code removes these specials
cut.off <- str_locate(y, "\\(Coronation Street\\)") %>% .[[1]]
if (!is.na(cut.off)) {y <- str_sub(y, end = cut.off - 1)}
#remove any extra text left so left with string that defines a vector of numbers
y <- str_replace_all(y, "[a-zA-Z\\(\\)]", "")
#evaluate string to get vector of numbers
output <- eval(parse(text = str_c("c(", y, ")")))
return(output)
}
# map the function that converts a duration string to vector of numeric years
years.exposure.list <- map(char.durations$Value, transcribe.duration)
names(years.exposure.list) <- char.durations$Character
# reformat into data.frame of exposure
appearances <- enframe(years.exposure.list) %>% unnest(value)
names(appearances) <- c("Character", "year.exposure")
#---------------- Birth Years -----------------------------
chars.born <- character.data %>% filter(Field == "Born")
# birth date is messy and needs cleaning.
# decided to only have birth year as some characters only have year...
# ...and didn't want to exclude these
year.of.birth <- chars.born$Value %>%
str_replace_all("(See \"Background information\" below)", "") %>%   #remove specific text sometimes in field
str_replace_all(" ", "") %>%                                        #remove spaces
str_replace_all("[a-z,A-Z,(,)]", "") %>%                            #remove letters and commas
str_sub(start = -4) %>%
parse_double()
# data frame of characters with a valid year of birth
valid.births <- data.frame(chars.born, year.of.birth) %>%
filter(year.of.birth > 999) %>%                                     # removes a few entries that had a date without year of birth
select(Character, year.of.birth)
#------------------- Death Years ----------------------
# character deaths dates are listed on fandom.wiki
# importantly, some of these dates are due to a character being mentioned as dead years after leaving the show
# as we are only interested in deaths while living on the street, need to match death year to exposure year.
#
#we also find it is not uncommon for characters to die within 1 year of their last appearance
#these are typically when an actor left abruptly (sometimes died) and couldn't film their last episode
#...we have decided to count these as the character still living on the street at time of character death
# create data.frame of characters and death years
char.deaths <- character.data %>% filter(Field == "Died")
#clean data to get death year
year.death <- char.deaths$Value %>%
str_sub(start = -4) %>%
parse_double()
char.deaths.full <- data.frame(char.deaths, year.death) %>% select(Character, year.death)
# initial joining of deaths table to exposure table
last.appearance <- appearances %>%
group_by(Character) %>%
filter(year.exposure == max(year.exposure)) %>%
ungroup()
#if the year of death is same as last appearance then died on street
#we also count as died on street is year of death was only 1 higher than last appearance on street...
#,,,this is represents cases where actor left abruptly and was written out, but character still essentially living on Coronation St.
dead.on.street <- left_join(last.appearance, char.deaths.full) %>%
filter(year.death == year.exposure | year.death == year.exposure + 1) %>%
select(-year.death)
# create vector that tells if each row of appearances is present in dead.on.street vector
is.death <- apply(appearances %>% select(Character, year.exposure), 1, function(row) {
any(apply(dead.on.street, 1, function(row2) all(row == row2)))
})
appearances
# create vector that tells if each row of appearances is present in dead.on.street vector
is.death <- apply(appearances, 1, function(row) {
any(apply(dead.on.street, 1, function(row2) all(row == row2)))
})
?apply
apply(appearances, 1, function(row)
# add year of birth and get age for each exposure
exposure.table <- data.frame(appearances,is.death) %>%    #attached the is.death field to appearances table
inner_join(valid.births) %>%                            #inner join valid births. not interested in characters that can't age so using inner_join
mutate(age = year.exposure - year.of.birth)             #calculate age
exposure.table
# size of grouping category for age and years
round.base <- 10
# create new variable for "state" - is useful for plots
exposure.table$state[exposure.table$is.death] <- "Deaths"
exposure.table$state[!exposure.table$is.death] <- "Survivals"
exposure.table$state <- factor(exposure.table$state, levels = c("Survivals", "Deaths"))
exposure.table
# size of grouping category for age and years
round.base <- 10
# create new variable for "state" - is useful for plots
exposure.table$state[exposure.table$is.death] <- "Deaths"
exposure.table$state[!exposure.table$is.death] <- "Survivals"
exposure.table$state <- factor(exposure.table$state, levels = c("Survivals", "Deaths"))
# create new variable for rounded age and year
exposure.table.4 <- exposure.table.4 %>%
mutate(round.age = floor(age / round.base) * round.base) %>%
mutate(round.year = floor(year.exposure / round.base) * round.base)
# create new variable for rounded age and rounded year
exposure.table.4$round.age.f <- factor(str_c(exposure.table.4$round.age, exposure.table.4$round.age + (round.base - 1), sep = "-"),
levels = str_c(seq(0, 90, by = round.base),
seq(0, 90, by = round.base) + (round.base - 1),
sep = "-"
)
)
exposure.table.4$round.year.f <- factor(
str_c(exposure.table.4$round.year,
str_sub(exposure.table.4$round.year + (round.base - 1), start = 3, end = 4),
sep = "-"
),
levels = str_c(seq(1960, 2020, by = round.base),
str_sub(seq(1960, 2020, by = round.base) + (round.base - 1), start = 3, end = 4),
sep = "-"
)
)
# create new variable for rounded age and year
exposure.table.4 <- exposure.table %>%
mutate(round.age = floor(age / round.base) * round.base) %>%
mutate(round.year = floor(year.exposure / round.base) * round.base)
# create new variable for rounded age and rounded year
exposure.table.4$round.age.f <- factor(str_c(exposure.table.4$round.age, exposure.table.4$round.age + (round.base - 1), sep = "-"),
levels = str_c(seq(0, 90, by = round.base),
seq(0, 90, by = round.base) + (round.base - 1),
sep = "-"
)
)
exposure.table.4$round.year.f <- factor(
str_c(exposure.table.4$round.year,
str_sub(exposure.table.4$round.year + (round.base - 1), start = 3, end = 4),
sep = "-"
),
levels = str_c(seq(1960, 2020, by = round.base),
str_sub(seq(1960, 2020, by = round.base) + (round.base - 1), start = 3, end = 4),
sep = "-"
)
)
exposure.table.4
exposure.table.4$round.year.f
# size of grouping category for age and years
round.base <- 10
# create new variable for "state" - is useful for plots
exposure.table$state[exposure.table$is.death] <- "Deaths"
exposure.table$state[!exposure.table$is.death] <- "Survivals"
exposure.table$state <- factor(exposure.table$state, levels = c("Survivals", "Deaths"))
# create new variable for rounded age and year
et.trunc <- exposure.table %>%
mutate(round.age = floor(age / round.base) * round.base) %>%
mutate(round.year = floor(year.exposure / round.base) * round.base)
# create new variable for rounded age and rounded year
et.trunc$round.age.f <- factor(str_c(et.trunc$round.age, et.trunc$round.age + (round.base - 1), sep = "-"),
levels = str_c(seq(0, 90, by = round.base),
seq(0, 90, by = round.base) + (round.base - 1),
sep = "-"
)
)
et.trunc$round.year.f <- factor(
str_c(et.trunc$round.year,
str_sub(et.trunc$round.year + (round.base - 1), start = 3, end = 4),
sep = "-"
),
levels = str_c(seq(1960, 2020, by = round.base),
str_sub(seq(1960, 2020, by = round.base) + (round.base - 1), start = 3, end = 4),
sep = "-"
)
)
#rounded year vs exposure
reps<-length(et.rounded$round.year.f %>% unique())
brick.pattern.img<-list.files(pattern = 'brick.pattern.2.png',full.names=TRUE) %>% rep(.,reps)
ggplot(data=et.rounded %>% group_by(round.year.f)) +
geom_bar_pattern(
aes(x=round.year.f,
pattern_filename = round.year.f
),
pattern         = 'image',
pattern_type    = 'tile',
pattern_scale   = 0.8,
pattern_spacing = 0.025
) +
scale_pattern_filename_discrete(choices = brick.pattern.img) +
scale_x_discrete(name="Years") +
scale_y_continuous(name="Total Exposure",breaks=seq(0,1000,by=100)) +
theme_classic() +
theme(legend.position = "none") +
theme(legend.position = "none",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
et.trunc
#rounded year vs exposure
reps<-length(et.trunc$round.year.f %>% unique())
brick.pattern.img<-list.files(pattern = 'brick.pattern.2.png',full.names=TRUE) %>% rep(.,reps)
ggplot(data=et.trunc %>% group_by(round.year.f)) +
geom_bar_pattern(
aes(x=round.year.f,
pattern_filename = round.year.f
),
pattern         = 'image',
pattern_type    = 'tile',
pattern_scale   = 0.8,
pattern_spacing = 0.025
) +
scale_pattern_filename_discrete(choices = brick.pattern.img) +
scale_x_discrete(name="Years") +
scale_y_continuous(name="Total Exposure",breaks=seq(0,1000,by=100)) +
theme_classic() +
theme(legend.position = "none") +
theme(legend.position = "none",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
round.base
brick.pattern.img
brick.pattern.img<-list.files(pattern = '\images\brick.pattern.2.png',full.names=TRUE) %>% rep(.,reps)
brick.pattern.img<-list.files(pattern = '\\images\\brick.pattern.2.png',full.names=TRUE) %>% rep(.,reps)
brick.pattern.img
brick.pattern.img<-list.files(pattern = '/images/brick.pattern.2.png',full.names=TRUE) %>% rep(.,reps)
brick.pattern.img
brick.pattern.img<-list.files(pattern = './images/brick.pattern.2.png',full.names=TRUE) %>% rep(.,reps)
brick.pattern.img
?list.files
brick.pattern.img<-list.files(path=".",pattern = 'brick.pattern.2.png',full.names=TRUE) %>% rep(.,reps)
brick.pattern.img
brick.pattern.img<-list.files(path="..",pattern = 'brick.pattern.2.png',full.names=TRUE) %>% rep(.,reps)
brick.pattern.img
getwd()
brick.pattern.img<-list.files(path="./Data",pattern = 'brick.pattern.2.png',full.names=TRUE) %>% rep(.,reps)
brick.pattern.img
brick.pattern.img<-list.files(path="./Images",pattern = 'brick.pattern.2.png',full.names=TRUE) %>% rep(.,reps)
brick.pattern.img
ggplot(data=et.trunc %>% group_by(round.year.f)) +
geom_bar_pattern(
aes(x=round.year.f,
pattern_filename = round.year.f
),
pattern         = 'image',
pattern_type    = 'tile',
pattern_scale   = 0.8,
pattern_spacing = 0.025
) +
scale_pattern_filename_discrete(choices = brick.pattern.img) +
scale_x_discrete(name="Years") +
scale_y_continuous(name="Total Exposure",breaks=seq(0,1000,by=100)) +
theme_classic() +
theme(legend.position = "none") +
theme(legend.position = "none",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggsave(".Plots/Exposure by Year (chimney).jpg")
#rounded age vs exposure
reps<-length(et.trunc$round.age.f %>% unique())
brick.pattern.img<-list.files(pattern = 'brick.pattern.2.png',full.names=TRUE) %>% rep(.,reps)
ggplot(data=et.trunc %>% group_by(round.age.f)) +
geom_bar_pattern(
aes(x=round.age.f,
pattern_filename = round.age.f
),
pattern         = 'image',
pattern_type    = 'tile',
pattern_scale   = 1,
pattern_spacing = 0.025
) +
scale_pattern_filename_discrete(choices = brick.pattern.img) +
scale_x_discrete(name="Ages") +
scale_y_continuous(name="Total Exposure",breaks=seq(0,1000,by=100)) +
theme_classic() +
theme(legend.position = "none",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
reps
brick.pattern.img<-list.files(pattern = 'brick.pattern.2.png',full.names=TRUE) %>% rep(.,reps)
ggplot(data=et.trunc %>% group_by(round.age.f)) +
geom_bar_pattern(
aes(x=round.age.f,
pattern_filename = round.age.f
),
pattern         = 'image',
pattern_type    = 'tile',
pattern_scale   = 1,
pattern_spacing = 0.025
) +
scale_pattern_filename_discrete(choices = brick.pattern.img) +
scale_x_discrete(name="Ages") +
scale_y_continuous(name="Total Exposure",breaks=seq(0,1000,by=100)) +
theme_classic() +
theme(legend.position = "none",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#rounded age vs exposure
reps<-length(et.trunc$round.age.f %>% unique())
brick.pattern.img<-list.files(path="./Images",pattern = 'brick.pattern.2.png',full.names=TRUE) %>% rep(.,reps)
ggplot(data=et.trunc %>% group_by(round.age.f)) +
geom_bar_pattern(
aes(x=round.age.f,
pattern_filename = round.age.f
),
pattern         = 'image',
pattern_type    = 'tile',
pattern_scale   = 1,
pattern_spacing = 0.025
) +
scale_pattern_filename_discrete(choices = brick.pattern.img) +
scale_x_discrete(name="Ages") +
scale_y_continuous(name="Total Exposure",breaks=seq(0,1000,by=100)) +
theme_classic() +
theme(legend.position = "none",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
?transmute
mort.table.year <- 2019 # either 1918 or 2020
(mort.table.year %in% c(2019,2020))
#------------------- Expected Deaths ----------------------
base.weight <- 7.5 # 5.3 for 2020; 7.5 for 2019; 1 for 1918
mort.table.year <- 2019 # either 1918 or 2020
expected.deaths <- function (base.weight,
mort.table.year) {
# Expected mortality rates (recent ONS data)
if (mort.table.year %in% c(2019,2020)) {
ONS.mort.path <- paste("ONS Mortality Rates ",mort.table.year,".csv",sep="")
ONS.mort <- read.csv(ONS.mort.path)
base.mort <- ONS.mort %>%
group_by(age) %>%
summarise(qx = mean(qx))
}
# Expected mortality rates (1918 ONS data)
if (mort.table.year == 1918) {
base.mort <- mort.data.1918.male %>%
group_by(round.age) %>%
summarise(mort.rate = mean(mort.rate)) %>%
rename(qx = mort.rate)
}
# re-weight qx
base.mort$qx <- base.mort$qx * base.weight
#convert 1918 into 10-year blocks instead of 5-year
if (mort.table.year == 1918) {
base.mort <- base.mort %>%
transmute(round.age = floor(round.age / 10) * 10) %>%
#select(-round.age) %>%
#rename(round.age = round.age.2) %>%
group_by(round.age) %>%
summarise(qx = mean(qx))
}
return(base.mort)
}
base.mort <- expected.deaths (base.weight = 7.5,
mort.table.year = 2019)
# attach the qx rates
if (mort.table.year %in% c(2019, 2020)) {
et.rounded <- exposure.table %>% left_join(base.mort, by = "age")
}
if (mort.table.year == 1918) {
et.rounded <- et.trunc %>% left_join(base.mort, by = "round.age")
}
ONS.mort.path <- paste("./Data/ONS Mortality Rates ",mort.table.year,".csv",sep="")
ONS.mort <- read.csv(ONS.mort.path)
ONS.mort
mort.table.year<-1918
ONS.mort.path <- paste("./Data/","ONS Mortality Rates ",mort.table.year,".csv",sep="")
ONS.mort <- read.csv(ONS.mort.path)
base.mort <- expected.deaths (base.weight = 7.5,
mort.table.year = 2019)
expected.deaths <- function (base.weight,
mort.table.year) {
# Expected mortality rates (recent ONS data)
if (mort.table.year %in% c(2019,2020)) {
ONS.mort.path <- paste("./Data/","ONS Mortality Rates ",mort.table.year,".csv",sep="")
ONS.mort <- read.csv(ONS.mort.path)
base.mort <- ONS.mort %>%
group_by(age) %>%
summarise(qx = mean(qx))
}
# Expected mortality rates (1918 ONS data)
#WARNING - NEED to get code that pulls in 1918 data... this ain't it
if (mort.table.year == 1918) {
base.mort <- mort.data.1918.male %>%
group_by(round.age) %>%
summarise(mort.rate = mean(mort.rate)) %>%
rename(qx = mort.rate)
}
# re-weight qx
base.mort$qx <- base.mort$qx * base.weight
#convert 1918 into 10-year blocks instead of 5-year
if (mort.table.year == 1918) {
base.mort <- base.mort %>%
transmute(round.age = floor(round.age / 10) * 10) %>%
#select(-round.age) %>%
#rename(round.age = round.age.2) %>%
group_by(round.age) %>%
summarise(qx = mean(qx))
}
return(base.mort)
}
base.mort <- expected.deaths (base.weight = 7.5,
mort.table.year = 2019)
base.mort
expected.mortality <- expected.deaths (base.weight = 7.5,
mort.table.year = 2019)
# attach the qx rates
if (mort.table.year %in% c(2019, 2020)) {
et.rounded <- exposure.table %>% left_join(expected.mortality, by = "age")
}
et.rounded
exposure.table %>% left_join(expected.mortality, by = "age")
# attach the qx rates
if (mort.table.year %in% c(2019, 2020)) {
et.rounded <- exposure.table %>% left_join(expected.mortality, by = "age")
}
mort.table.year
mort.table.year<-2019
# attach the qx rates
if (mort.table.year %in% c(2019, 2020)) {
et.rounded <- exposure.table %>% left_join(expected.mortality, by = "age")
}
et.rounded
# get AvsE table and plot (using compare.AvsE() function)
x <- compare.AvsE(et.rounded, age.cutoff = 80, mort.cutoff = 0.1)
#-----------------Scatter plots to show survivals/deaths--------------------------
ggplot(et.trunc %>%
group_by(char.name),#%>%
#mutate(is.death.2=any(is.death)),
aes(x=year.exposure,y=age,colour=state,alpha=state)) +
geom_point(shape=19) +
scale_x_continuous(name="Year") +
scale_y_continuous(name="Age",breaks=seq(0,100,by=20)) +
scale_alpha_manual(values=c("Survivals"=0.3,"Deaths"=0.85)) +
scale_colour_manual(values=list("Survivals"="bisque3","Deaths"="firebrick1")) +
facet_wrap(~state) +
theme_bw() +
theme(legend.position="none",
strip.background = element_rect(fill="firebrick1"),
strip.text = element_text(color="white",size=11,face="bold"))
#-----------------Scatter plots to show survivals/deaths--------------------------
ggplot(et.trunc %>%
group_by(Character),#%>%
#mutate(is.death.2=any(is.death)),
aes(x=year.exposure,y=age,colour=state,alpha=state)) +
geom_point(shape=19) +
scale_x_continuous(name="Year") +
scale_y_continuous(name="Age",breaks=seq(0,100,by=20)) +
scale_alpha_manual(values=c("Survivals"=0.3,"Deaths"=0.85)) +
scale_colour_manual(values=list("Survivals"="bisque3","Deaths"="firebrick1")) +
facet_wrap(~state) +
theme_bw() +
theme(legend.position="none",
strip.background = element_rect(fill="firebrick1"),
strip.text = element_text(color="white",size=11,face="bold"))
